package com.example.projekt_proba2

import android.widget.DatePicker
import androidx.activity.ComponentActivity
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.Button
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.input.KeyboardType
import androidx.lifecycle.Observer
import androidx.navigation.NavHostController

import com.example.projekt_proba2.data.Item
import com.example.projekt_proba2.data.ItemViewModel
import kotlinx.coroutines.flow.collect
import java.sql.Timestamp
import java.time.LocalDate
import java.time.ZoneOffset

import java.util.Date


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun todaysMealScreen(
    viewModel: ItemViewModel, passedDate: Long, navController: NavHostController
)
{







    Column(
        modifier = Modifier.fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {


        var selectedDate by remember {mutableStateOf("")}

            selectedDate = passedDate.toString()

            var todaysItem = viewModel.getItemFromDateDirectly(LocalDate.now().atStartOfDay(ZoneOffset.UTC).toInstant().toEpochMilli())

            if(passedDate!=0L)
            {
                todaysItem = viewModel.getItemFromDateDirectly(selectedDate.toLong())
            }
            else
            {
                selectedDate = LocalDate.now().atStartOfDay(ZoneOffset.UTC).toInstant().toEpochMilli().toString()
            }

                var Brekafast by remember { if(todaysItem != null) {mutableStateOf(todaysItem.brekafast.toString())}else{mutableStateOf("")} }
                var Lunch by remember {if(todaysItem != null) { mutableStateOf(todaysItem.lunch.toString())}else{mutableStateOf("")} }
                var Dinner by remember { if(todaysItem != null) {mutableStateOf(todaysItem.dinner.toString())}else{mutableStateOf("")} }







            OutlinedTextField(value = Brekafast,
                onValueChange = { Brekafast = it },
                label = { Text("Brekfast") },
                keyboardOptions = KeyboardOptions.Default.copy(
                    keyboardType = KeyboardType.Number
                ),
            )
            OutlinedTextField(value = Lunch,
                onValueChange = { Lunch = it },
                label = { Text("Lunch") },
                keyboardOptions = KeyboardOptions.Default.copy(
                    keyboardType = KeyboardType.Number
                ),
            )
            OutlinedTextField(value = Dinner,
                onValueChange = { Dinner = it },
                label = { Text("Dinner") },
                keyboardOptions = KeyboardOptions.Default.copy(
                    keyboardType = KeyboardType.Number
                ),
            )

            OutlinedTextField(value = selectedDate,
                onValueChange = { selectedDate = it },
                label = { Text("selectedDateTimestamp") },
                keyboardOptions = KeyboardOptions.Default.copy(
                    keyboardType = KeyboardType.Number
                ),
            )




        Button(onClick = {
                val newItem = Item(
                    id = 0, // Auto-generated by Room
                    date = selectedDate.toLong(), // You may want to set the actual date here
                    brekafast = Brekafast.toInt(),
                    lunch = Lunch.toInt(),
                    dinner = Dinner.toInt()
                )

                //tutaj sprawdzanie czy jest w bazie danych już coś z tą samą datą
                //jeżeli nie to dodaje item
                //jeżeli tak to edytuje item

                val timestampNow = LocalDate.now().atStartOfDay(ZoneOffset.UTC).toInstant().toEpochMilli()

                //here get item that has "date" set to "timestampNow"
                viewModel.fetchItemsFromDate(selectedDate.toLong())

                    if (viewModel.checkIfItemExists(selectedDate.toLong())) {
                        println("wykrylo ze jest")

                        var existingItem = viewModel.getItemFromDateDirectly(selectedDate.toLong())
                        existingItem.brekafast = newItem.brekafast
                        existingItem.lunch = newItem.lunch
                        existingItem.dinner = newItem.dinner
                        viewModel.updateItemDetails(existingItem)
                        /*

                        val updatedItem = existingItem.copy(
                            brekafast = newItem.brekafast,
                            lunch = newItem.lunch,
                            dinner = newItem.dinner
                        )
                        */
                    } else {

                        println("wykrylo ze NIE jest")

                        viewModel.addItem(newItem)
                    }

                navController.navigate("calendar")
                //here change nav controller back to calendarCompose
                }
                ) {
                    Text(text = "submit")
                }

    }
}